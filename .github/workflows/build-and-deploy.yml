name: CI
on:
  push:
  schedule:
    - cron: '0 3 * * SUN'

jobs:
  Build:
    strategy:
      matrix:
        os: [windows, macos, ubuntu]
        jvm_version: [8, 11, 14]
    runs-on: ${{ matrix.os }}-latest
    env:
      JAVA_VERSION: ${{ matrix.jvm_version }}
      OS: ${{ matrix.os }}
      TERM: dumb
    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Fetch tags
        shell: bash
        run: git fetch --tags -f
      - name: Populate TAG and BRANCH environment variables
        shell: bash
        run: |
          TAG=$(git describe --tags --exact-match HEAD || echo '')
          echo "Current tag is: '$TAG' (setup in the TAG environment variable)"
          echo "TAG=$TAG" >> $GITHUB_ENV
          BRANCH=$([ -z "$TAG" ] && echo ${GITHUB_REF#refs/heads/} || echo $TAG)
          echo "Current tag is: '$BRANCH' (setup in BRANCH TAG environment variable)"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
      # Check if the configuration is supported
      # COMPATIBLE means the build can run on this matrix combination
      # REFERENCE means this is the combination that produces the reference artifacts
      # (hence, artifacts from REFERENCE configuration shall be deployed)
      # Only one matrix entry should be REFERENCE=true
      # If REFERENCE=true, then also COMPATIBLE=true
      - shell: bash
        run: .github/build-steps/compatibility_check.sh
      # Install the JDK
      - uses: joschi/setup-jdk@v2.3.0
        if: ${{ env.COMPATIBLE == 'true' }}
        with:
          java-version: ${{ matrix.jvm_version }}
      # Install additional packages
      - name: Configure Linux
        shell: bash
        if: ${{ env.COMPATIBLE == 'true' && contains(matrix.os, 'ubuntu') }}
        run: |
          if [ -x .github/scripts/configure_linux ]; then
            .github/scripts/configure_linux
          fi
      - name: Configure MacOS X
        shell: bash
        if: ${{ env.COMPATIBLE == 'true' && contains(matrix.os, 'macos') }}
        run: |
          if [ -f .github/scripts/configure_macos ]; then
            .github/scripts/configure_macos
          fi
      - name: Configure the Windows Pagefile
        if: ${{ env.COMPATIBLE == 'true' && contains(matrix.os, 'windows') }}
        uses: al-cheb/configure-pagefile-action@v1.2
      - name: Configure Windows
        shell: bash
        if: ${{ env.COMPATIBLE == 'true' && contains(matrix.os, 'windows') }}
        run: |
          if [ -f .github/scripts/configure_windows ]; then
            .github/scripts/configure_windows
          fi
      - name: Build
        if: ${{ env.COMPATIBLE == 'true' }}
        shell: bash
        run: .github/build-steps/build.sh
      - name: Check
        if: ${{ env.COMPATIBLE == 'true' }}
        shell: bash
        run: .github/build-steps/check.sh
      - name: CodeCov
        if: ${{ env.REFERENCE == 'true' }}
        uses: codecov/codecov-action@v1
      - name: Deploy
        if: ${{ env.REFERENCE == 'true' }}
        shell: bash
        env:
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.SIGNING_PASSWORD }}
          GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}
          GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}
          MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          MAVEN_CENTRAL_USERNAME: danysk
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
        run: .github/build-steps/deploy.sh
  Build-Success:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      - shell: bash
        run: touch ok
      - uses: actions/upload-artifact@v2
        with:
          name: success
          path: ok
  CI-Complete:
    needs: Build-Success
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: success
      - shell: bash
        run: '[ -f ok ]'
  Automerge:
    needs: CI-Complete
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: automerge
        uses: "DanySK/yaagha@master"
        env:
          GITHUB_TOKEN: "${{ secrets.AUTOMERGE_TOKEN }}"
          MERGE_FORKS: "false"
          MERGE_LABELS: "version-upgrade"
          BLOCK_LABELS: "blocked, wontfix, invalid"
          MERGE_METHOD: "rebase"
          CLOSE_ON_CONFLICT: "true"
          DELETE_BRANCH_ON_CLOSE: "true"
          GIT_USER_NAME: "Danilo Pianini"
          GIT_USER_EMAIL: "danilo.pianini@gmail.com"
