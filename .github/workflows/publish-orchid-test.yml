name: Publish website
on:
  push:
  schedule:
    - cron: '0 3 * * SUN'

jobs:
  Build:
    runs-on: ubuntu-latest
    env:
      JAVA_VERSION: 11
      OS: ubuntu
      TERM: dumb
    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Fetch tags
        shell: bash
        run: git fetch --tags -f
      - name: Populate TAG and BRANCH environment variables
        shell: bash
        run: |
          TAG=$(git describe --tags --exact-match HEAD || echo '')
          echo "Current tag is: '$TAG' (setup in the TAG environment variable)"
          echo "TAG=$TAG" >> $GITHUB_ENV
          BRANCH=$([ -z "$TAG" ] && echo ${GITHUB_REF#refs/heads/} || echo $TAG)
          echo "Current tag is: '$BRANCH' (setup in BRANCH TAG environment variable)"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
      # Check if the configuration is supported
      # COMPATIBLE means the build can run on this matrix combination
      # REFERENCE means this is the combination that produces the reference artifacts
      # (hence, artifacts from REFERENCE configuration shall be deployed)
      # Only one matrix entry should be REFERENCE=true
      # If REFERENCE=true, then also COMPATIBLE=true
      - shell: bash
        run: .github/build-steps/compatibility_check.sh
      # Install the JDK
      - uses: joschi/setup-jdk@v2.3.0
        if: ${{ env.COMPATIBLE == 'true' }}
        with:
          java-version: ${{ matrix.jvm_version }}
          server-id: ossrh
          server-username: MAVEN_CENTRAL_USERNAME
          server-password: MAVEN_CENTRAL_PASSWORD
          gpg-private-key: ${{ secrets.SIGNING_KEY }}
          gpg-passphrase: SIGNING_PASSWORD
      # Install additional packages
      - name: Configure Linux
        shell: bash
        if: ${{ env.COMPATIBLE == 'true' && contains(matrix.os, 'ubuntu') }}
        run: |
          if [ -x .github/scripts/configure_linux ]; then
            .github/scripts/configure_linux
          fi
      - name: Deploy
        if: ${{ env.REFERENCE == 'true' }}
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          GRADLE_PUBLISH_SECRET: ${{ secrets.GRADLE_PUBLISH_SECRET }}
          GRADLE_PUBLISH_KEY: ${{ secrets.GRADLE_PUBLISH_KEY }}
          MAVEN_CENTRAL_PASSWORD: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          MAVEN_CENTRAL_USERNAME: danysk
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.SIGNING_PASSWORD }}
          SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
          SURGE_LOGIN: ${{ secrets.SURGE_LOGIN }}
          SURGE_TOKEN: ${{ secrets.SURGE_TOKEN }}
        run: ./gradlew orchidDeploy
