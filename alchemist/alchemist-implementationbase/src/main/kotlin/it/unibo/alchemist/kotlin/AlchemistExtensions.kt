/*******************************************************************************
 * Copyright (C) 2010-2018, Danilo Pianini and contributors listed in the main
 * project's alchemist/build.gradle file.
 *
 * This file is part of Alchemist, and is distributed under the terms of the
 * GNU General Public License, with a linking exception, as described in the file
 * LICENSE in the Alchemist distribution's top directory.
 ******************************************************************************/
package it.unibo.alchemist.kotlin

import it.unibo.alchemist.model.interfaces.Time
import java.awt.Point

/**
 * The opposite of [fold].
 *
 * @param extractor A function that provides a sequence of
 * elements given a specific element of the same type.
 * @receiver The starting element to unfold.
 * @return A sequence of [E] generated by unfolding on each
 * element provided by the [extractor] function.
 *
 * @See [fold].
 */
fun <E> E.unfold(extractor: (E) -> Sequence<E>): Sequence<E> =
    sequenceOf(this) + extractor(this).flatMap { it.unfold(extractor) }
operator fun Time.plus(other: Time): Time = sum(other)
operator fun Time.minus(other: Time): Time = subtract(other)
// fun Position<*>.distanceTo(other: Position<*>): Double = Position.distanceTo(this, other)
// operator fun Position<*>.get(i: Int) = getCoordinate(i)
// operator fun <P : Position<P>> Position<*>.plus(other: Position<*>): P = (this as P).add(other as P)!!
// operator fun <P : Position<P>> Position<*>.minus(other: Position<*>): P = (this as P).subtract(other as P)!!
fun makePoint(x: Number, y: Number) = Point(x.toInt(), y.toInt())
operator fun Point.plus(p: Point): Point = Point(x + p.x, y + p.y)
operator fun Point.minus(p: Point): Point = Point(x - p.x, y - p.y)
