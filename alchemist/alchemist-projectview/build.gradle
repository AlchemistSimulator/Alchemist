dependencies {
    api project(':alchemist-interfaces')
    if (JavaVersion.current().java9Compatible) {
        implementation "org.controlsfx:controlsfx:${controlsFXVersion}"
    } else {
        implementation "org.controlsfx:controlsfx:${controlsFXJ8Version}"
    }
    if (JavaVersion.current().isJava11Compatible()) {
        for(platform in ['linux', 'mac', 'win']) {
            api "org.openjfx:javafx-base:${javafxVersion}:$platform"
            api "org.openjfx:javafx-controls:${javafxVersion}:$platform"
            api "org.openjfx:javafx-fxml:${javafxVersion}:$platform"
            api "org.openjfx:javafx-graphics:${javafxVersion}:$platform"
            api "org.openjfx:javafx-media:${javafxVersion}:$platform"
            api "org.openjfx:javafx-swing:${javafxVersion}:$platform"
        }
    }
    implementation project(':alchemist-implementationbase')
    implementation project(':alchemist-loading')
    implementation project(':alchemist-runner')
    implementation project(':alchemist-swingui')
    implementation project(':alchemist-time')
    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation "de.codecentric.centerdevice:javafxsvg:${javaFXSVG}"
    implementation "org.danilopianini:urlclassloader-util:${urlClassLoaderUtilVersion}"
    implementation "commons-io:commons-io:${commonsIOVersion}"
    testRuntimeOnly project(':alchemist-incarnation-protelis')
    testRuntimeOnly project(':alchemist-incarnation-sapere')
    testRuntimeOnly project(':alchemist-incarnation-biochemistry')
}
/*
 * Copyright (C) 2010-2019, Danilo Pianini and contributors listed in the main project's alchemist/build.gradle file.
 *
 * This file is part of Alchemist, and is distributed under the terms of the
 * GNU General Public License, with a linking exception,
 * as described in the file LICENSE in the Alchemist distribution's top directory.
 */

import org.gradle.plugins.ide.eclipse.model.AccessRule

eclipse.classpath.file {
    whenMerged { classpath ->
        classpath.entries.findAll { entry ->
            entry.kind == 'con' && entry.path.contains('StandardVMType')
        }*.accessRules = [new AccessRule("0", "javafx/**")]
        classpath.entries = classpath.entries.findAll { entry -> 
            !entry.path.contains('build/')
        }
    }
}
