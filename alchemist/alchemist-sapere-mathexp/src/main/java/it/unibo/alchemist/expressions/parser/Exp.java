/*******************************************************************************
 * Copyright (C) 2010-2018, Danilo Pianini and contributors listed in the main
 * project's alchemist/build.gradle file.
 * 
 * This file is part of Alchemist, and is distributed under the terms of the
 * GNU General Public License, with a linking exception, as described in the file
 * LICENSE in the Alchemist distribution's top directory.
 ******************************************************************************/

/* Generated By:JavaCC: Do not edit this line. Exp.java */
package it.unibo.alchemist.expressions.parser;

import it.unibo.alchemist.expressions.implementations.AST;
import it.unibo.alchemist.expressions.implementations.ComparatorTreeNode;
import it.unibo.alchemist.expressions.implementations.ConstTreeNode;
import it.unibo.alchemist.expressions.implementations.ListComparator;
import it.unibo.alchemist.expressions.implementations.ListComparatorTreeNode;
import it.unibo.alchemist.expressions.implementations.ListTreeNode;
import it.unibo.alchemist.expressions.implementations.NumTreeNode;
import it.unibo.alchemist.expressions.implementations.Operator;
import it.unibo.alchemist.expressions.implementations.OperatorTreeNode;
import it.unibo.alchemist.expressions.implementations.VarTreeNode;
import it.unibo.alchemist.expressions.interfaces.ITree;
import it.unibo.alchemist.expressions.interfaces.ITreeNode;

import java.util.LinkedHashSet;
import java.util.Set;

import org.danilopianini.lang.HashString;

import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;


// CHECKSTYLE:OFF
@SuppressFBWarnings
@SuppressWarnings("PMD")
public class Exp implements ExpConstants {

    private static int[] jj_la1_0;

    static {
        jj_la1_init_0();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[] { 0x7000, 0x140b8980, 0x38000, 0x38000, 0x138000, 0xc00600, 0x90000, 0x90000, 0xc00600, 0x3000000, 0x3000000, 0x14038180, 0x90000, 0x140b8180, 0x90000, 0x140b8180, };
    }

    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();

    private int[] jj_expentry;

    private int jj_gen;

    SimpleCharStream jj_input_stream;

    private int jj_kind = -1;

    private final int[] jj_la1 = new int[16];

    /** Next token. */
    public Token jj_nt;

    private int jj_ntk;

    /** Current token. */
    public Token token;

    /** Generated Token Manager. */
    public ExpTokenManager token_source;

    /** Constructor with generated Token Manager. */
    public Exp(final ExpTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 16; i++) {
            jj_la1[i] = -1;
        }
    }

    /** Constructor with InputStream. */
    public Exp(final java.io.InputStream stream) {
        this(stream, null);
    }

    /** Constructor with InputStream and supplied encoding */
    public Exp(final java.io.InputStream stream, final String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new ExpTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 16; i++) {
            jj_la1[i] = -1;
        }
    }

    /** Constructor. */
    public Exp(final java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new ExpTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 16; i++) {
            jj_la1[i] = -1;
        }
    }

    public final ITreeNode<?> AtomicExpr() throws ParseException {
        ITreeNode<?> s;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case 26:
            jj_consume_token(26);
            s = Expr();
            jj_consume_token(27);
            break;
        case 28:
            jj_consume_token(28);
            s = ModExpr();
            jj_consume_token(28);
            break;
        case MIN:
            jj_consume_token(MIN);
            jj_consume_token(26);
            s = MinExpr();
            jj_consume_token(27);
            break;
        case MAX:
            jj_consume_token(MAX);
            jj_consume_token(26);
            s = MaxExpr();
            jj_consume_token(27);
            break;
        case VAR:
            s = Var();
            break;
        case LIT:
            s = Cost();
            break;
        case NUM:
            s = Number();
            break;
        default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        return s;
    }

    public final String Comparator() throws ParseException {
        Token t;
        t = jj_consume_token(COMP);
        return t.image;
    }

    public final ITreeNode<HashString> Cost() throws ParseException {
        Token t;
        t = jj_consume_token(LIT);
        return new ConstTreeNode(new HashString(t.image));
    }

    /** Disable tracing. */
    public final void disable_tracing() {
    }

    public final ITreeNode<?> E() throws ParseException {
        ITreeNode<?> op, s1 = null, s2;
        op = null;
        String cmp = null;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case DEF:
            jj_consume_token(DEF);
            jj_consume_token(18);
            s1 = Var();
            final ListComparator l;
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case COMP:
                cmp = Comparator();
                s2 = Expr();
                op = new ComparatorTreeNode(new HashString(cmp), s1, s2);
                break;
            case LISTCOMP:
                cmp = listComparator();
                if (cmp.equals("has")) {
                    l = ListComparator.HAS;
                } else { // if(cmp.equals("hasnot")){
                    l = ListComparator.HAS_NOT;
                }
                s2 = ListExpr();
                op = new ListComparatorTreeNode(l, s1, s2);
                break;
            case UNARYLISTCOMP:
                // final ListComparator l;
                cmp = unaryListComparator();
                if (cmp.equals("isempty")) {
                    l = ListComparator.EMPTY;
                } else {
                    l = ListComparator.NOT_EMPTY;
                }
                op = new ListComparatorTreeNode(l, s1, null);
                break;
            default:
                jj_la1[0] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            return op;
        case MIN:
        case MAX:
        case NUM:
        case VAR:
        case LIT:
        case 26:
        case 28:
            s1 = Expr();
            op = s1;
            return op;
        case 19:
            s1 = ListExpr();
            op = s1;
            return op;
        default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    /** Enable tracing. */
    public final void enable_tracing() {
    }

    public final ITreeNode<?> Expr() throws ParseException {
        ITreeNode<?> op, s1, s2 = null;
        op = null;
        s1 = TimesExpr();
        // op = new DoubleTreeNode(s1.getData(), Type.Operator);
        label_2: while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ADD:
            case DEL:
            case 22:
            case 23:
                break;
            default:
                jj_la1[5] = jj_gen;
                break label_2;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 22:
                jj_consume_token(22);
                s2 = TimesExpr();
                op = new OperatorTreeNode(Operator.PLUS, s1, s2);
                s1 = op;
                break;
            case 23:
                jj_consume_token(23);
                s2 = TimesExpr();
                op = new OperatorTreeNode(Operator.MINUS, s1, s2);
                s1 = op;
                break;
            case ADD:
                jj_consume_token(ADD);
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 19:
                    s2 = ListExpr();
                    break;
                case VAR:
                    s2 = Var();
                    break;
                default:
                    jj_la1[6] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                op = new OperatorTreeNode(Operator.ADD, s1, s2);
                break;
            case DEL:
                jj_consume_token(DEL);
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 19:
                    s2 = ListExpr();
                    break;
                case VAR:
                    s2 = Var();
                    break;
                default:
                    jj_la1[7] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                op = new OperatorTreeNode(Operator.DEL, s1, s2);
                break;
            default:
                jj_la1[8] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        if (s2 == null) {
            return s1;
        } else {
            return op;
        }
    }

    /** Generate ParseException. */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[29];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 16; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 29; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /** Get the next Token. */
    public final Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /** Get the specific Token. */
    public final Token getToken(final int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    public final ITree Init() throws ParseException {
        final ITreeNode<?> n = E();
        jj_consume_token(0);
        return new AST(n);
    }

    private Token jj_consume_token(final int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    private int jj_ntk() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }

    public final String listComparator() throws ParseException {
        Token t;
        t = jj_consume_token(LISTCOMP);
        return t.image;
    }

    public final ITreeNode<Set<ITreeNode<?>>> ListExpr() throws ParseException {
        ITreeNode<Set<ITreeNode<?>>> op;
        ITreeNode<?> s1;
        op = null;
        Set<ITreeNode<?>> listVal = new LinkedHashSet<>();
        op = new ListTreeNode(listVal);
        jj_consume_token(19);
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case 20:
            jj_consume_token(20);
            break;
        case NUM:
        case VAR:
        case LIT:
            label_1: while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case VAR:
                    s1 = Var();
                    break;
                case LIT:
                    s1 = Cost();
                    break;
                case NUM:
                    s1 = Number();
                    break;
                default:
                    jj_la1[2] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                jj_consume_token(21);
                listVal.add(s1);
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case NUM:
                case VAR:
                case LIT:
                    break;
                default:
                    jj_la1[3] = jj_gen;
                    break label_1;
                }
            }
            jj_consume_token(20);
            break;
        default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
        return op;
    }

    public final OperatorTreeNode MaxExpr() throws ParseException {
        // OperatorTreeNode op = null;
        ITreeNode<?> s1, s2;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case VAR:
        case 19:
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 19:
                s1 = ListExpr();
                break;
            case VAR:
                s1 = Var();
                break;
            default:
                jj_la1[14] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            return new OperatorTreeNode(Operator.MAX, s1, null);
        case MIN:
        case MAX:
        case NUM:
        case LIT:
        case 26:
        case 28:
            s1 = Expr();
            jj_consume_token(21);
            s2 = Expr();
            return new OperatorTreeNode(Operator.MAX, s1, s2);
        default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    public final OperatorTreeNode MinExpr() throws ParseException {
        ITreeNode<?> s1, s2;
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case VAR:
        case 19:
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 19:
                s1 = ListExpr();
                break;
            case VAR:
                s1 = Var();
                break;
            default:
                jj_la1[12] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            return new OperatorTreeNode(Operator.MIN, s1, null);
        case MIN:
        case MAX:
        case NUM:
        case LIT:
        case 26:
        case 28:
            s1 = Expr();
            jj_consume_token(21);
            s2 = Expr();
            return new OperatorTreeNode(Operator.MIN, s1, s2);
        default:
            jj_la1[13] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    public final OperatorTreeNode ModExpr() throws ParseException {
        ITreeNode<?> s1;
        s1 = Expr();
        return new OperatorTreeNode(Operator.MOD, s1, null);
    }

    public final ITreeNode<Double> Number() throws ParseException {
        Token t;
        t = jj_consume_token(NUM);
        return new NumTreeNode(Double.parseDouble(t.image));
    }

    /** Reinitialise. */
    public void ReInit(final ExpTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 16; i++) {
            jj_la1[i] = -1;
        }
    }

    /** Reinitialise. */
    public void ReInit(final java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /** Reinitialise. */
    public void ReInit(final java.io.InputStream stream, final String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 16; i++) {
            jj_la1[i] = -1;
        }
    }

    /** Reinitialise. */
    public void ReInit(final java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 16; i++) {
            jj_la1[i] = -1;
        }
    }

    public final ITreeNode<?> TimesExpr() throws ParseException {
        ITreeNode<?> s1, s2 = null;
        s1 = AtomicExpr();
        label_3: while (true) {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 24:
            case 25:
                break;
            default:
                jj_la1[9] = jj_gen;
                break label_3;
            }
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 24:
                jj_consume_token(24);
                s2 = AtomicExpr();
                return new OperatorTreeNode(Operator.TIMES, s1, s2);
            case 25:
                jj_consume_token(25);
                s2 = AtomicExpr();
                return new OperatorTreeNode(Operator.DIV, s1, s2);
            default:
                jj_la1[10] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        }
        return s1;
    }

    public final String unaryListComparator() throws ParseException {
        Token t;
        t = jj_consume_token(UNARYLISTCOMP);
        return t.image;
    }

    public final ITreeNode<?> Var() throws ParseException {
        Token t;
        t = jj_consume_token(VAR);
        return new VarTreeNode(new HashString(t.image));
    }

}
