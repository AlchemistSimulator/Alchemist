module utils
import protelis:lang:utils
import java.lang.System.out
import java.lang.Math.sqrt
import java.lang.Math.abs
import it.unibo.alchemist.model.smartcam.ProtelisUtils.toTuple
import it.unibo.alchemist.model.smartcam.ProtelisUtils.closestPositionToTargetAtDistance

public def log(msg) {
    out.print("[");
    out.print(self.getDeviceUID());
    out.print("]: ");
    out.println(msg);
    0
}

public def getVision() {
    toTuple(env.get("vision"))
}

public def minBy(a, b, getValue) {
    mux(getValue.apply(a) < getValue.apply(b)) {
        a
    } else {
        b
    }
}

public def distanceBetweenPos(pos1, pos2) {
    let diff = pos1 - pos2;
    sqrt(diff.get(0)^2 + diff.get(1)^2)
}

public def distanceFromPos(pos) {
    distanceBetweenPos(self.getCoordinates(), pos)
}

public def posToTuple(pos) {
    [pos.getX(), pos.getY()]
}

public def distanceFromTarget(target) {
    distanceFromPos(posToTuple(target.getPosition()))
}

public def closestTarget(targets) {
    targets.reduce(noTarget(), (t1, t2) -> { minBy(t1, t2, distanceFromTarget) })
}

public def noTarget() {
    0
}

public def getFoVDistance() {
    env.get("FoVDistance")
}

public def getFoVCenterDistance() {
    2 * getFoVDistance() / 3
}

public def follow(target) {
    env.put("state", "following");
    env.put("destination", closestPositionToTargetAtDistance(target.getPosition(), getFoVCenterDistance()));
    env.put("heading", target.getPosition());
    target
}

public def explore() {
    env.put("state", "exploring");
    if(env.has("destination")){
        env.remove("destination")
    } else { 0 };
    if(env.has("heading")){
        env.remove("heading")
    } else { 0 };
    noTarget()
}

public def followOrExplore(target) {
    if(target == noTarget()) {
        explore()
    } else {
        follow(target)
    }
}