/*
 * Copyright (C) 2010-2019, Danilo Pianini and contributors listed in the main project's alchemist/build.gradle file.
 *
 * This file is part of Alchemist, and is distributed under the terms of the
 * GNU General Public License, with a linking exception,
 * as described in the file LICENSE in the Alchemist distribution's top directory.
 */
package it.unibo.alchemist.kotlin

import it.unibo.alchemist.model.implementations.times.DoubleTime
import it.unibo.alchemist.model.interfaces.Time
import javafx.scene.canvas.Canvas
import java.awt.Point

/**
 * The opposite of [fold].
 *
 * @param extractor A function that provides a sequence of
 * elements given a specific element of the same type.
 * @receiver The starting element to unfold.
 * @return A sequence of [E] generated by unfolding on each
 * element provided by the [extractor] function.
 *
 * @See [fold].
 */
fun <E> E.unfold(extractor: (E) -> Sequence<E>): Sequence<E> =
    sequenceOf(this) + extractor(this).flatMap { it.unfold(extractor) }

/**
 * Creates a [Point].
 *
 * @param x the x coordinate.
 * @param y the y coordinate.
 */
fun makePoint(x: Number, y: Number) = Point(x.toInt(), y.toInt())

/**
 * Sums [this] and the given [Point].
 *
 * @param p the other point.
 */
operator fun Point.plus(p: Point): Point = Point(x + p.x, y + p.y)
/**
 * Subtracts [this] and the given [Point].
 *
 * @param p the other point.
 */
operator fun Point.minus(p: Point): Point = Point(x - p.x, y - p.y)

/**
 * Plus operator for [Time].
 */
operator fun Time.plus(other: Double): Time = plus(
    DoubleTime(
        other
    )
)

/**
 * Minus operator for [Time].
 */
operator fun Time.minus(other: Double): Time = minus(
    DoubleTime(
        other
    )
)

/**
 * Clears a given canvas.
 */
fun Canvas.clear() = graphicsContext2D.clearRect(0.0, 0.0, width, height)
