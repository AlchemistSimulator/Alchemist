/*
 * Copyright (C) 2010-2018, Danilo Pianini and contributors listed in the main
 * project's alchemist/build.gradle file.
 *
 * This file is part of Alchemist, and is distributed under the terms of the
 * GNU General Public License, with a linking exception, as described in the file
 * LICENSE in the Alchemist distribution's top directory.
 */
package it.unibo.alchemist.kotlin

import it.unibo.alchemist.model.implementations.positions.Euclidean2DPosition
import it.unibo.alchemist.model.implementations.positions.Manhattan2DPosition
import it.unibo.alchemist.model.interfaces.GeoPosition
import it.unibo.alchemist.model.interfaces.Position2D

/**
 * The opposite of [fold].
 *
 * @param extractor A function that provides a sequence of
 * elements given a specific element of the same type.
 * @receiver The starting element to unfold.
 * @return A sequence of [E] generated by unfolding on each
 * element provided by the [extractor] function.
 *
 * @See [fold].
 */
operator fun Position2D<*>.plus(other: Position2D<*>): Position2D<*> = when (this) {
    is GeoPosition -> if (other is GeoPosition) this.add(other) else null
    is Euclidean2DPosition -> if (other is Euclidean2DPosition) this.add(other) else null
    is Manhattan2DPosition -> if (other is Manhattan2DPosition) this.add(other) else null
    else -> null
} ?: throw IllegalArgumentException("$this can't be compared with $other")

operator fun Position2D<*>.minus(other: Position2D<*>): Position2D<*> = when (this) {
    is GeoPosition -> if (other is GeoPosition) this.subtract(other) else null
    is Euclidean2DPosition -> if (other is Euclidean2DPosition) this.subtract(other) else null
    is Manhattan2DPosition -> if (other is Manhattan2DPosition) this.subtract(other) else null
    else -> null
} ?: throw IllegalArgumentException("$this can't be compared with $other")
