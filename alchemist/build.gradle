apply plugin: 'project-report'
subprojects {
    apply plugin: 'java-library'
}

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        gradlePluginPortal()
    }
    dependencies {
        classpath "gradle.plugin.org.jmailen.gradle:kotlinter-gradle:$ktlintVersion"
        classpath "org.danilopianini:build-commons:${buildCommonsVersion}"
        classpath "org.danilopianini:javadoc.io-linker:${javadocIOLinkerVersion}"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokkaVersion}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}"
        classpath "com.gradle:build-scan-plugin:${buildScanPluginVersion}"
    }
}

allprojects {

    scalaVersion = "${scalaMajorVersion}.${scalaMinorVersion}"

    apply plugin: 'org.danilopianini.build-commons'
    apply plugin: 'idea'
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.dokka'
    apply plugin: "org.jmailen.kotlinter"

    compileKotlin {
        kotlinOptions {
            jvmTarget = 1.8
        }
    }

    configurations {
        all*.exclude group: 'org.eclipse.xtext', module: 'org.eclipse.xtext.dependencies'
        all*.exclude group: 'org.eclipse.platform', module: 'org.eclipse.equinox.common'
        all {
            if(!it.name.contains('antlr')) {
                resolutionStrategy {
                    force "org.antlr:antlr-runtime:${antlrRuntimeVersion}"
                }
            }
        }
    }

    test {
        failFast = true
        testLogging { events "passed", "skipped", "failed", "standardError" }
    }

    tasks.withType(Checkstyle) {
        dependsOn(test)
        showViolations = false
    }
    tasks.withType(FindBugs) {
        dependsOn(test)
    }
    tasks.withType(Pmd) {
        dependsOn(test)
    }
    kotlinter {
        ignoreFailures = false
        indentSize = 4
        continuationIndentSize = 4
        reporters = ['checkstyle', 'plain', 'html']
    }

    dependencies {
        implementation "org.apache.commons:commons-math3:$math3Version"
        implementation "org.jetbrains:annotations:$jetbrainsAnnotationsVersion"
        implementation "com.google.code.findbugs:findbugs:$findBugsVersion"
        implementation "org.slf4j:slf4j-api:$slf4jVersion"
        implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
        implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
        implementation "org.danilopianini:thread-inheritable-resource-loader:${resLoaderVersion}"
        runtimeOnly "ch.qos.logback:logback-classic:$logbackVersion"
        testImplementation "junit:junit:$junitVersion"
        testRuntimeOnly "ch.qos.logback:logback-classic:$logbackVersion"
        doclet "org.jboss.apiviz:apiviz:$apivizVersion"
    }

    publishing.publications {
        main(MavenPublication) {
            pom {
                developers {
                    developer {
                        name = 'Danilo Pianini'
                        email = 'danilo.pianini@unibo.it'
                        url = 'http://www.danilopianini.org'
                    }
                    developer {
                        name = 'Roberto Casadei'
                        email = 'roby.casadei@unibo.it'
                        url = 'https://www.unibo.it/sitoweb/roby.casadei'
                    }
                }
                contributors {
                    contributor {
                        name = 'Jacob Beal'
                        email = 'jakebeal@bbn.com'
                        url = 'http://web.mit.edu/jakebeal/www/'
                    }
                    contributor {
                        name = 'Michele Bombardi'
                        email = 'michele.bombardi@studio.unibo.it'
                        url = 'http://apice.unibo.it/xwiki/bin/view/XWiki/MicheleBombardi/'
                    }
                    contributor {
                        name = 'Elisa Casadio'
                        email = 'elisa.casadio7@studio.unibo.it'
                    }
                    contributor {
                        name = 'Chiara Casalboni'
                        email = 'chiara.casalboni2@studio.unibo.it'
                        url = 'http://apice.unibo.it/xwiki/bin/view/XWiki/ChiaraCasalboni2/'
                    }
                    contributor {
                        name = 'Matteo Francia'
                        email = 'm.francia@unibo.it'
                    }
                    contributor {
                        name = 'Enrico Galassi'
                        email = 'enrico.galassi@studio.unibo.it'
                        url = 'http://apice.unibo.it/xwiki/bin/view/XWiki/EnricoGalassi/'
                    }
                    contributor {
                        name = 'Gabriele Graffieti'
                        email = 'gabriele.graffieti@studio.unibo.it'
                    }
                    contributor {
                        name = 'Matteo Magnani'
                        email = 'matteo.magnani18@studio.unibo.it'
                    }
                    contributor {
                        name = 'NiccolÃ² Maltoni'
                        email = 'niccolo.maltoni@studio.unibo.it'
                    }
                    contributor {
                        name = 'Luca Mella'
                        email = 'vuksa.mihajlovic@studio.unibo.it'
                    }
                    contributor {
                        name = 'Vuksa Mihajlovic'
                        email = 'luca.mella@studio.unibo.it'
                        url = 'http://apice.unibo.it/xwiki/bin/view/XWiki/LucaMella/'
                    }
                    contributor {
                        name = 'Sara Montagna'
                        email = 'sara.montagna@unibo.it'
                        url = 'http://saramontagna.apice.unibo.it/'
                    }
                    contributor {
                        name = 'Luca Nenni'
                        email = 'luca.nenni@studio.unibo.it'
                        url = 'http://apice.unibo.it/xwiki/bin/view/XWiki/LucaNenni/'
                    }
                    contributor {
                        name = 'Andrea Placuzzi'
                        email = 'andrea.placuzzi@studio.unibo.it'
                    }
                    contributor {
                        name = 'Franco Pradelli'
                        email = 'franco.pradelli@studio.unibo.it'
                    }
                    contributor {
                        name = 'Giacomo Pronti'
                        email = 'giacomo.pronti@studio.unibo.it'
                        url = 'http://apice.unibo.it/xwiki/bin/view/XWiki/GiacomoPronti/'
                    }
                    contributor {
                        name = 'Giacomo Scaparrotti'
                        email = 'giacomo.scaparrotti@studio.unibo.it'
                        url = 'https://www.linkedin.com/in/giacomo-scaparrotti-0aa77569'
                    }
                }
            }
        }
    }
    
    /*
     * Configure Dokka to run before Javadoc, so that Kotlin classes are correctly documented
     * and doclet still applied for Java classes. Then copy missing files and lowercase files
     * to the javadoc folder.
     */
    javadoc {
        options.encoding = 'UTF-8'
        dependsOn(dokka)
    }
    dokka {
        outputDirectory = "$buildDir/dokka"
        reportUndocumented = true
        impliedPlatforms = ["JVM"]
        outputFormat = 'javadoc'
    }
    task fillDocs(type: Copy) {
        dependsOn dokka
        dependsOn javadoc
        from dokka.outputDirectory
        into javadoc.destinationDir
        eachFile {
            if (it.relativePath.getFile(destinationDir).exists()) {
                it.exclude()
            }
        }
    }
    task makeDocs(type: Copy) {
        dependsOn fillDocs
        from dokka.outputDirectory
        into javadoc.destinationDir
        eachFile {
            if (Character.isUpperCase(it.name.charAt(0))) {
                it.exclude()
            }
        }
    }
    javadoc.finalizedBy makeDocs
    dokka.finalizedBy makeDocs
}

subprojects.each { subproject -> rootProject.evaluationDependsOn(subproject.path)}

/*
 * Remove tasks that should not exist in subprojects
 */
subprojects.each { it.tasks.remove(wrapper) }

/*
 * Running a task on the parent project implies running the same task first on any subproject
 */
tasks.each { task ->
    subprojects.each { subproject ->
        def subtask = subproject.tasks.findByPath("${task.name}")
        if (subtask != null) {
            task.dependsOn(subtask)
        }
    }
}

dependencies {
    implementation subprojects
    implementation "commons-cli:commons-cli:$cliVersion"
    implementation "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "org.apache.commons:commons-lang3:${lang3Version}"
    implementation "org.apache.ignite:ignite-core:${igniteVersion}"
}

javadoc {
    dependsOn subprojects.javadoc
    source subprojects.javadoc.source
    subprojects.sourceSets.main.runtimeClasspath.each {
        classpath += it
    }
}

dokka {
    subprojects.sourceSets.main.allSource.srcDirs.flatten().each {
        sourceDirs += it
    }   
}

dokka {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
}

allprojects {
    def jdocTasks = ['javadoc', 'uploadArchives', 'projectReport', 'buildDashboard', 'javadocJar']
    def selectedTasks = gradle.startParameter.taskNames ?: defaultTasks
    if (!selectedTasks.disjoint(jdocTasks)) {
        apply plugin: 'org.danilopianini.javadoc.io-linker'
    }
}

task fatJar(type: Jar, dependsOn: subprojects.jar) {
    manifest {
        attributes 'Implementation-Title': 'Alchemist',
                'Implementation-Version': rootProject.version,
                'Main-Class': 'it.unibo.alchemist.Alchemist'
    }
    baseName = "${rootProject.name}-redist"
    zip64 = true
    from(configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }) {
        // remove all signature files
        exclude "META-INF/"
        exclude "ant_tasks/"
        exclude "about_files/"
        exclude "help/about/"
        exclude 'build'
        exclude '.gradle'
        exclude 'build.gradle'
        exclude 'gradle'
        exclude 'gradlew'
        exclude 'gradlew.bat'
    }
    with jar
}

apply plugin: com.gradle.scan.plugin.BuildScanPlugin
buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

defaultTasks 'clean', 'test', 'check', 'makeDocs', 'projectReport', 'buildDashboard', 'fatJar', 'signMainPublication'
