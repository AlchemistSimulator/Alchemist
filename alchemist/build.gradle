apply plugin: 'build-dashboard'
apply plugin: 'project-report'

allprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'findbugs'
    apply plugin: 'pmd'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'maven'
    apply plugin: 'signing'

    repositories { mavenCentral() }

    configurations {
        doc { transitive false }
        doclet
        all*.exclude group: 'org.eclipse.xtext', module: 'org.eclipse.xtext.dependencies'
    }

    sourceCompatibility = jdkVersion
    targetCompatibility = jdkVersion

    dependencies {
        compile "org.danilopianini:gson-extras:$gsonExtrasVersion"
        compile "com.google.code.findbugs:findbugs:$findBugsVersion"
        compile "org.apache.commons:commons-math3:$math3Version"
        compile "org.slf4j:slf4j-api:$slf4jVersion"

        runtime "ch.qos.logback:logback-classic:$logbackVersion"

        testCompile "junit:junit:$junitVersion"

        testRuntime "ch.qos.logback:logback-classic:$logbackVersion"

        doclet "org.jboss.apiviz:apiviz:$apivizVersion"

        pmd "net.sourceforge.pmd:pmd-core:$pmdVersion"
        pmd "net.sourceforge.pmd:pmd-vm:$pmdVersion"
        pmd "net.sourceforge.pmd:pmd-plsql:$pmdVersion"
        pmd "net.sourceforge.pmd:pmd-jsp:$pmdVersion"
        pmd "net.sourceforge.pmd:pmd-xml:$pmdVersion"
        pmd "net.sourceforge.pmd:pmd-java:$pmdVersion"
    }

    test {
        testLogging {
            exceptionFormat = 'full'
        }
    }

    jar {
        manifest {
            attributes 'Implementation-Title': artifactId, 'Implementation-Version': version
        }
        manifest.attributes provider: 'Alma Mater Studiorum Universit√† di Bologna'
    }

    task javadoc(type: Javadoc, overwrite: true) {
        source configurations.doc.collect { zipTree(it) }
        source sourceSets.main.allJava
        classpath = sourceSets.main.output + sourceSets.main.compileClasspath
        include '**/*.java'
        destinationDir file("$project.buildDir/docs/javadoc/")
        failOnError = false
        options.showAll()
        options.addBooleanOption('nopackagediagram', true)
        options.addStringOption('Xdoclint:none', '-quiet')
        configure(options) {
            windowTitle "$projectLongName version $project.version Javadoc API"
            docTitle "$projectLongName $project.version reference API"
            links 'http://docs.oracle.com/javase/8/docs/api/'
            links 'http://trove4j.sourceforge.net/javadocs/'
            links 'http://hephaestus.apice.unibo.it/javalib-build/javalib-java7/build/docs/javadoc/'
            links 'http://hephaestus.apice.unibo.it/javalib-build/javalib/build/docs/javadoc/'
            doclet 'org.jboss.apiviz.APIviz'
            docletpath file(configurations.doclet.asPath)
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    signing { sign configurations.archives }

    eclipse {
        classpath {
            downloadJavadoc = true
            downloadSources = true
        }
    }

    findbugs {
        if (JavaVersion.current().isJava6()) {
            toolVersion = "2.0.3"
        }
        ignoreFailures = true
        effort = "max"
        reportLevel = "low"
        excludeFilterConfig = resources.text.fromFile("${rootProject.projectDir}/findbugsExcludes.xml")
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    pmd {
        ignoreFailures = true
        ruleSets = []
        ruleSetFiles = files("${rootProject.projectDir}/pmd.xml")
        targetJdk = pmdTargetJdk
        toolVersion = pmdVersion
    }

    tasks.withType(Pmd) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    checkstyle {
        ignoreFailures = true
        configFile = new File("${rootProject.projectDir}/style.xml")
    }

    checkstyleMain << {
        ant.xslt(in: reports.xml.destination,
        style: new File("${rootProject.projectDir}/checkstyle-noframes-sorted.xsl"),
        out: new File(reports.xml.destination.parent, 'main.html'))
    }

    checkstyleTest << {
        ant.xslt(in: reports.xml.destination,
        style: new File("${rootProject.projectDir}/checkstyle-noframes-sorted.xsl"),
        out: new File(reports.xml.destination.parent, 'test.html'))
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.enabled true
        }
    }

    jacocoTestReport.dependsOn 'test'

    signArchives.onlyIf { Boolean.parseBoolean(signArchivesIsEnabled) }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                pom.project {
                    name artifactId
                    description projectDescription
                    packaging 'jar'
                    url "$scmRootUrl/$artifactId"
                    licenses {
                        license {
                            name licenseName
                            url licenseUrl
                        }
                    }
                    developers {
                        developer {
                            name 'Danilo Pianini'
                            email 'danilo.pianini@unibo.it'
                            url 'http://www.danilopianini.org'
                        }
                    }
                    contributors {
                        contributor {
                            name 'Sara Montagna'
                            email 'sara.montagna@unibo.it'
                            url 'http://saramontagna.apice.unibo.it/'
                        }
                        contributor {
                            name 'Jacob Beal'
                            email 'jakebeal@bbn.com'
                            url 'http://web.mit.edu/jakebeal/www/'
                        }
                        contributor {
                            name 'Michele Bombardi'
                            email 'michele.bombardi@studio.unibo.it'
                            url 'http://apice.unibo.it/xwiki/bin/view/XWiki/MicheleBombardi/'
                        }
                        contributor {
                            name 'Chiara Casalboni'
                            email 'chiara.casalboni2@studio.unibo.it'
                            url 'http://apice.unibo.it/xwiki/bin/view/XWiki/ChiaraCasalboni2/'
                        }
                        contributor {
                            name 'Enrico Galassi'
                            email 'enrico.galassi@studio.unibo.it'
                            url 'http://apice.unibo.it/xwiki/bin/view/XWiki/EnricoGalassi/'
                        }
                        contributor {
                            name 'Luca Mella'
                            email 'luca.mella@studio.unibo.it'
                            url 'http://apice.unibo.it/xwiki/bin/view/XWiki/LucaMella/'
                        }
                        contributor {
                            name 'Luca Nenni'
                            email 'luca.nenni@studio.unibo.it'
                            url 'http://apice.unibo.it/xwiki/bin/view/XWiki/LucaNenni/'
                        }
                        contributor {
                            name 'Giacomo Pronti'
                            email 'giacomo.pronti@studio.unibo.it'
                            url 'http://apice.unibo.it/xwiki/bin/view/XWiki/GiacomoPronti/'
                        }
                        contributor {
                            name 'Giacomo Scaparrotti'
                            email 'giacomo.scaparrotti@studio.unibo.it'
                            url 'https://www.linkedin.com/in/giacomo-scaparrotti-0aa77569'
                        }
                        contributor {
                            name 'Gabriele Graffieti'
                            email 'gabriele.graffieti@studio.unibo.it'
                        }
                        contributor {
                            name 'Franco Pradelli'
                            email 'franco.pradelli@studio.unibo.it'
                        }
                    }
                    scm {
                        url "$scmRootUrl/$artifactId"
                        connection "$scmType:$scmLogin/$scmRepoName"
                        developerConnection "$scmType:$scmLogin/$scmRepoName"
                    }
                }
            }
        }
    }
}

subprojects.each { subproject -> rootProject.evaluationDependsOn(subproject.path)}

buildDashboard.dependsOn 'jacocoTestReport'
buildDashboard.dependsOn 'check'

/*
 * Running a task on the parent project implies running the same task first on any subproject
 */
tasks.each { task -> 
    subprojects.each { subproject ->
        def subtask = subproject.tasks.findByPath("${task.name}")
        if (subtask != null) {
            task.dependsOn(subtask)
        }
    }
}

dependencies {
    compile subprojects
    compile (
        "commons-cli:commons-cli:$cliVersion",
        "net.sourceforge.streamsupport:streamsupport:$streamsupportVersion",
    )
}

javadoc {
    dependsOn subprojects.javadoc
    source subprojects.javadoc.source
}

task wrapper(type: Wrapper) { gradleVersion = gradleVersionToUse }

task fatJar(type: Jar, dependsOn: subprojects.assemble) {
    manifest {
        attributes 'Implementation-Title': 'Alchemist',
        'Implementation-Version': rootProject.version,
        'Main-Class': 'it.unibo.alchemist.Alchemist'
    }
    baseName = "${rootProject.name}-redist"
    from(configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }) {
        // remove all signature files
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

defaultTasks 'wrapper', 'clean', 'build', 'check', 'javadoc', 'assemble', 'install', 'projectReport', 'buildDashboard', 'fatJar'
